package pt.upa.transporter.ws;

import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

import javax.jws.WebService;

@WebService(
		endpointInterface="pt.upa.transporter.ws.TransporterPortType",
		wsdlLocation="transporter.1_0.wsdl",
		name="Transporter",
		portName="TransporterPort",
		targetNamespace="http://ws.transporter.upa.pt/",
		serviceName="TransporterService"
	)
public class TransporterPort implements TransporterPortType{
	
	static public HashMap<String, String> regioes;
	static public int transporter;
	
	@Override
	public String ping(String name) {
		// TODO Auto-generated method stub
		System.out.println(" ping...");
		return " ping...daqui transporter\n" + name + "!";
	}

	@Override
	public JobView requestJob(String origin, String destination, int price)
			throws BadLocationFault_Exception, BadPriceFault_Exception {
		JobView job = new JobView();
		int valor = 0;
		if(price < 0){
			BadPriceFault faultInfo = new BadPriceFault();
			faultInfo.setPrice(price);
			throw new BadPriceFault_Exception("error in server", faultInfo);
		}
		else if(regioes.containsKey(origin) == false){
			BadLocationFault faultInfo = new BadLocationFault();
			faultInfo.setLocation(origin);
			throw new BadLocationFault_Exception("error in server", faultInfo);
		}
		else if(regioes.containsKey(destination) == false){
			BadLocationFault faultInfo = new BadLocationFault();
			faultInfo.setLocation(destination);
			throw new BadLocationFault_Exception("error in server", faultInfo);
		}
		else if((regioes.get(origin) == "RegiaoNorte" && transporter%2 == 1) || 
				(regioes.get(origin) == "RegiaoSul" && transporter%2 == 0)){
			BadLocationFault faultInfo = new BadLocationFault();
			faultInfo.setLocation(origin);
			throw new BadLocationFault_Exception("error in server", faultInfo);
		}
		else if((regioes.get(destination) == "RegiaoNorte" && transporter%2 == 1) || 
				(regioes.get(destination) == "RegiaoSul" && transporter%2 == 0)){
			BadLocationFault faultInfo = new BadLocationFault();
			faultInfo.setLocation(destination);
			throw new BadLocationFault_Exception("error in server", faultInfo);
		}
		else{
			if(price > 100){
				return null;
			}
			else if(price <= 10){
				int valor = ThreadLocalRandom.current().nextInt(0, price-1);
				job.setJobPrice(valor);
			}
			else{
				if(price%2==1){
					if(transporter%2 == 1){
						valor = ThreadLocalRandom.current().nextInt(0, price-1);
					}
					else{
						valor = ThreadLocalRandom.current().nextInt(price+1, 99);
					}
				}
				else{
					if(transporter%2 == 0){
						valor = ThreadLocalRandom.current().nextInt(0, price-1);
					}
					else{
						valor = ThreadLocalRandom.current().nextInt(price+1, 99);
					}
				}
				job.setJobPrice(valor);
			}
			System.out.println("ola");
		}
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public JobView decideJob(String id, boolean accept) throws BadJobFault_Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public JobView jobStatus(String id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<JobView> listJobs() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void clearJobs() {
		// TODO Auto-generated method stub
		
	}

	// TODO

}
