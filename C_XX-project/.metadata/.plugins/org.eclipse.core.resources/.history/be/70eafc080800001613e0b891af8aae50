package pt.upa.broker.ws;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.jws.WebService;

import pt.upa.transporter.ws.BadLocationFault_Exception;
import pt.upa.transporter.ws.BadPriceFault_Exception;
import pt.upa.transporter.ws.TransporterPortType;

@WebService(
	endpointInterface="pt.upa.broker.ws.BrokerPortType",
	wsdlLocation="broker.1_0.wsdl",
	name="Broker",
	portName="BrokerPort",
	targetNamespace="http://ws.broker.upa.pt/",
	serviceName="BrokerService"
)
public class BrokerPort implements BrokerPortType{

	static public String test;
	static public HashMap<String, String> regioes;
	static public TransporterPortType port2;
	static public Map<String, Object> requestContext;
	public List<TransportView> listTransporters = new ArrayList<TransportView>();
	
	@Override
	public String ping(String name) {
		System.out.println(" ping...\n");
		return " ping..." + name + "!\n";
	}

	@Override
	public String requestTransport(String origin, String destination, int price)
			throws InvalidPriceFault_Exception, UnavailableTransportFault_Exception,
			UnavailableTransportPriceFault_Exception, UnknownLocationFault_Exception {
		if(price < 0){
			InvalidPriceFault faultInfo = new InvalidPriceFault();
			faultInfo.setPrice(price);
			throw new InvalidPriceFault_Exception("error in server", faultInfo);
		}
		else if(regioes.containsKey(origin) == false){
			UnknownLocationFault faultInfo = new UnknownLocationFault();
			faultInfo.setLocation(origin);
			throw new UnknownLocationFault_Exception("error in server", faultInfo);
		}
		else if(regioes.containsKey(destination) == false){
			UnknownLocationFault faultInfo = new UnknownLocationFault();
			faultInfo.setLocation(destination);
			throw new UnknownLocationFault_Exception("error in server", faultInfo);
		}
		try{
			port2.requestJob(origin, destination, price);
		}catch(BadLocationFault_Exception e){
			UnknownLocationFault faultInfo = new UnknownLocationFault();
			faultInfo.setLocation(origin);
			throw new UnknownLocationFault_Exception("error in server", faultInfo);
			
		} catch (BadPriceFault_Exception e) {
			e.printStackTrace();
			UnavailableTransportPriceFault faultInfo = new UnavailableTransportPriceFault();
			faultInfo.setBestPriceFound(price);
			throw new UnavailableTransportPriceFault_Exception("error in server", faultInfo);
			
		}
		
		
		return " request transport...\n";
	}

	@Override
	public TransportView viewTransport(String id) throws UnknownTransportFault_Exception {
		
		return null;
	}

	@Override
	public List<TransportView> listTransports() {
		return listTransporters;
	}

	@Override
	public void clearTransports() {
		listTransporters.clear();
	}

	

}
